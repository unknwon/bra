// Code generated by go-bindata.
// sources:
// templates/default.bra.toml
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDefaultBraToml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x52\x4d\x6f\xd4\x30\x10\x3d\xd7\xbf\x62\xe4\x72\x2c\x65\x39\xec\x05\x89\x43\x05\x3d\x16\x55\xa8\x12\x87\x55\x64\x79\xed\x49\x18\xe1\x8f\x95\x3d\x2e\xd9\x7f\xcf\xc4\xc9\x6a\x11\x9c\x9b\x4b\x9c\x97\xf7\xde\xbc\x99\xf1\xa1\xb4\x34\x28\x4a\xc4\xc6\x45\x5f\xe1\x33\x1c\xd4\xcd\x41\x4f\x59\xdf\x81\xa6\x54\xd9\x86\xa0\x87\xbb\x2b\x76\x6c\x14\xfc\x86\xdc\x7f\x78\xf7\xf0\xfc\x6c\xbe\x3d\x3c\x3d\xea\x41\x0d\x37\x97\xe7\x16\xbe\xe4\x18\x6d\x12\x3f\xb1\x07\x4a\x20\x3e\x85\xd5\x6f\xcb\xee\xa7\x11\x47\x29\xc3\xa5\xe1\x46\xfe\xb1\xc0\xb0\xc0\xb5\x1d\xdf\x7b\x2a\xe8\x38\x17\xc2\xba\x09\x04\xe9\xc1\x86\x8b\xfb\xd7\x2b\x05\x38\x43\x67\x6d\x5c\x9c\xb9\x73\xf5\xbd\xc4\x1d\x56\xfa\xe3\xcc\x98\x2a\xe5\xf4\x17\x9b\xa6\x94\x0b\x6e\x4c\xe2\xa5\xb3\x94\x3d\x9a\x98\x7d\x0b\x58\xf5\x00\xff\xd7\xc1\xd9\x85\xe6\x11\xc6\x92\xe3\x6a\x43\x69\xda\x9c\xcc\x48\x22\xbb\xa6\xbc\x85\xef\x38\xe1\x7c\xaa\x30\xe6\x02\x9d\x23\x64\xa8\x27\x74\x34\x92\x83\x94\x59\xde\xd2\x62\x9f\xa7\xf1\x18\xec\x59\xd4\x1f\xf7\xbb\xdd\xa6\x7f\x92\xa5\x44\x1b\x64\x7a\x8c\xe5\x55\x0e\x92\xe0\xa5\xd0\x34\x61\x81\x2e\x02\x7c\xc5\xc4\xaa\xff\x2f\xed\xc4\x86\x29\xe6\xc6\xdd\x65\xb5\x78\xa1\x88\x6b\xcb\xc4\xd0\x12\x53\x58\xd2\x38\x84\x5f\x14\x82\x9a\x8a\x75\x38\xb6\x60\x96\x2f\x51\x8d\x36\x54\xbc\x6c\x44\x04\x4b\x70\x9c\xe5\x20\x8b\x84\x23\x8e\xcb\xbc\xd6\xe5\x84\xf3\xea\xf0\x26\x37\x46\xf2\xca\xa5\x51\xea\x50\xcf\xc9\x0d\x2a\x50\x95\xed\x19\xeb\x7d\x91\x52\xfa\xd3\x7e\xb7\xdf\x69\x55\x30\x66\xc6\x7f\xd0\x3f\x01\x00\x00\xff\xff\xb6\xb7\x71\xdc\xcc\x02\x00\x00")

func templatesDefaultBraTomlBytes() ([]byte, error) {
	return bindataRead(
		_templatesDefaultBraToml,
		"templates/default.bra.toml",
	)
}

func templatesDefaultBraToml() (*asset, error) {
	bytes, err := templatesDefaultBraTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/default.bra.toml", size: 716, mode: os.FileMode(420), modTime: time.Unix(1455748872, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/default.bra.toml": templatesDefaultBraToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": {nil, map[string]*bintree{
		"default.bra.toml": {templatesDefaultBraToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
